    INFO: 2021-07-27 14:00:29,267:               log.py:   20: Logging to /home/akgrown/code/jobs/qcom/5GVideo/mdpdf.log
   DEBUG: 2021-07-27 14:00:29,267:               cli.py:  103: README.md
    INFO: 2021-07-27 14:00:29,270:         converter.py:   14: README.md
   DEBUG: 2021-07-27 14:00:29,290:      pdf_renderer.py:  470: printSegment: Overview
   DEBUG: 2021-07-27 14:00:29,295:      pdf_renderer.py:  470: printSegment:  1 
   DEBUG: 2021-07-27 14:00:29,298:      pdf_renderer.py:  470: printSegment: build / environment
   DEBUG: 2021-07-27 14:00:29,298:      pdf_renderer.py:  470: printSegment:  2 
   DEBUG: 2021-07-27 14:00:29,298:      pdf_renderer.py:  470: printSegment: downloading reference content from the 
   DEBUG: 2021-07-27 14:00:29,299:      pdf_renderer.py:  470: printSegment: content server
   DEBUG: 2021-07-27 14:00:29,300:      pdf_renderer.py:  470: printSegment:  3 
   DEBUG: 2021-07-27 14:00:29,300:      pdf_renderer.py:  470: printSegment: video conversion step (8 to 10bit, EXR)
   DEBUG: 2021-07-27 14:00:29,301:      pdf_renderer.py:  470: printSegment:  4 
   DEBUG: 2021-07-27 14:00:29,301:      pdf_renderer.py:  470: printSegment: running verifications
   DEBUG: 2021-07-27 14:00:29,302:      pdf_renderer.py:  470: printSegment:  5 
   DEBUG: 2021-07-27 14:00:29,302:      pdf_renderer.py:  470: printSegment: creating test data
   DEBUG: 2021-07-27 14:00:29,302:      pdf_renderer.py:  470: printSegment:  6 
   DEBUG: 2021-07-27 14:00:29,303:      pdf_renderer.py:  470: printSegment: plotting
   DEBUG: 2021-07-27 14:00:29,304:      pdf_renderer.py:  470: printSegment: work in progress:
   DEBUG: 2021-07-27 14:00:29,305:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2021-07-27 14:00:29,305:      pdf_renderer.py:  470: printSegment: db rate/metric plotting
   DEBUG: 2021-07-27 14:00:29,306:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2021-07-27 14:00:29,306:      pdf_renderer.py:  470: printSegment: HDR PQ support
   DEBUG: 2021-07-27 14:00:29,307:      pdf_renderer.py:  470: printSegment: Docker image
   DEBUG: 2021-07-27 14:00:29,308:      pdf_renderer.py:  470: printSegment: The sample 
   DEBUG: 2021-07-27 14:00:29,308:      pdf_renderer.py:  470: printSegment: Dockerfile
   DEBUG: 2021-07-27 14:00:29,309:      pdf_renderer.py:  470: printSegment:  located in the 
   DEBUG: 2021-07-27 14:00:29,311:      pdf_renderer.py:  470: printSegment: docker/
   DEBUG: 2021-07-27 14:00:29,314:      pdf_renderer.py:  470: printSegment:  directory, aims at bundling the scripts and dependencies in a
   DEBUG: 2021-07-27 14:00:29,314:      pdf_renderer.py:  470: printSegment: convenient 
   DEBUG: 2021-07-27 14:00:29,315:      pdf_renderer.py:  470: printSegment: &
   DEBUG: 2021-07-27 14:00:29,315:      pdf_renderer.py:  470: printSegment:  reproducible environment: JM, HM, VTM, SCM, VMAF, HDRTools.
   DEBUG: 2021-07-27 14:00:29,316:      pdf_renderer.py:  470: printSegment: The scripts work equally well without the docker images, assuming that environment variables provide the
   DEBUG: 2021-07-27 14:00:29,316:      pdf_renderer.py:  470: printSegment: executable path (encoders, HDRTols, VMAF).
   DEBUG: 2021-07-27 14:00:29,317:      pdf_renderer.py:  470: printSegment: Building the docker image
   DEBUG: 2021-07-27 14:00:29,317:      pdf_renderer.py:  470: printSegment: git clone https://github.com/haudiobe/5GVideo.git
   DEBUG: 2021-07-27 14:00:29,318:      pdf_renderer.py:  470: printSegment: cd 5GVideo
   DEBUG: 2021-07-27 14:00:29,319:      pdf_renderer.py:  470: printSegment: docker build -t anchortools:latest -f ./docker/Dockerfile .
   DEBUG: 2021-07-27 14:00:29,319:      pdf_renderer.py:  470: printSegment: Using the docker image
   DEBUG: 2021-07-27 14:00:29,320:      pdf_renderer.py:  470: printSegment: run the docker container, mounting the Bitstreams 
   DEBUG: 2021-07-27 14:00:29,320:      pdf_renderer.py:  470: printSegment: &
   DEBUG: 2021-07-27 14:00:29,321:      pdf_renderer.py:  470: printSegment:  ReferenceSequence directories to /data.
   DEBUG: 2021-07-27 14:00:29,322:      pdf_renderer.py:  470: printSegment: root_dir=/path/to/host/data
   DEBUG: 2021-07-27 14:00:29,322:      pdf_renderer.py:  470: printSegment: scenario=Scenario-3/265
   DEBUG: 2021-07-27 14:00:29,322:      pdf_renderer.py:  470: printSegment: anchor_key=S3-A36-265
   DEBUG: 2021-07-27 14:00:29,323:      pdf_renderer.py:  470: printSegment: docker run -it \
   DEBUG: 2021-07-27 14:00:29,323:      pdf_renderer.py:  470: printSegment:     --mount type=bind,source=$root_dir,target=/data \
   DEBUG: 2021-07-27 14:00:29,324:      pdf_renderer.py:  470: printSegment:     anchortools:latest \
   DEBUG: 2021-07-27 14:00:29,324:      pdf_renderer.py:  470: printSegment:     ./verify.py decoder --scenario_dir /data/Bitstreams/$scenario
   DEBUG: 2021-07-27 14:00:29,324:      pdf_renderer.py:  470: printSegment: -k $anchor_key
   DEBUG: 2021-07-27 14:00:29,325:      pdf_renderer.py:  470: printSegment: Downloading reference content
   DEBUG: 2021-07-27 14:00:29,326:      pdf_renderer.py:  470: printSegment: The 
   DEBUG: 2021-07-27 14:00:29,326:      pdf_renderer.py:  470: printSegment: download.py
   DEBUG: 2021-07-27 14:00:29,326:      pdf_renderer.py:  470: printSegment:  script downloads content from the public 
   DEBUG: 2021-07-27 14:00:29,327:      pdf_renderer.py:  470: printSegment: content server
   DEBUG: 2021-07-27 14:00:29,327:      pdf_renderer.py:  470: printSegment: .
   DEBUG: 2021-07-27 14:00:29,328:      pdf_renderer.py:  470: printSegment: /
   DEBUG: 2021-07-27 14:00:29,328:      pdf_renderer.py:  470: printSegment: !
   DEBUG: 2021-07-27 14:00:29,329:      pdf_renderer.py:  470: printSegment: \
   DEBUG: 2021-07-27 14:00:29,329:      pdf_renderer.py:  470: printSegment:  your storage must support files larger than 4GB in order to download content.
   DEBUG: 2021-07-27 14:00:29,330:      pdf_renderer.py:  470: printSegment: The download script helps in downloading content for a given scenario / codec:
   DEBUG: 2021-07-27 14:00:29,330:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2021-07-27 14:00:29,331:      pdf_renderer.py:  470: printSegment: reference sequences
   DEBUG: 2021-07-27 14:00:29,331:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2021-07-27 14:00:29,332:      pdf_renderer.py:  470: printSegment: variant data (encoder configuration, bitstream, metadata)
   DEBUG: 2021-07-27 14:00:29,333:      pdf_renderer.py:  470: printSegment: When content is already available in the target directory, it is skipped if the local and original file size matches.
   DEBUG: 2021-07-27 14:00:29,336:      pdf_renderer.py:  470: printSegment: Downloading reference sequences needed for a given scenario/codec
   DEBUG: 2021-07-27 14:00:29,339:      pdf_renderer.py:  470: printSegment: download.py --dl-ref-sequences --scenario_dir
   DEBUG: 2021-07-27 14:00:29,341:      pdf_renderer.py:  470: printSegment: /data/Bitstreams/Scenario-3/265-Screen/H265
   DEBUG: 2021-07-27 14:00:29,342:      pdf_renderer.py:  470: printSegment: this download the 
   DEBUG: 2021-07-27 14:00:29,342:      pdf_renderer.py:  470: printSegment: reference-sequence.csv
   DEBUG: 2021-07-27 14:00:29,343:      pdf_renderer.py:  470: printSegment:  for the target scenario 
   DEBUG: 2021-07-27 14:00:29,343:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,344:      pdf_renderer.py:  470: printSegment: Scenario-3-Screen
   DEBUG: 2021-07-27 14:00:29,344:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,344:      pdf_renderer.py:  470: printSegment: ,
   DEBUG: 2021-07-27 14:00:29,345:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2021-07-27 14:00:29,346:      pdf_renderer.py:  470: printSegment: reads that csv, and
   DEBUG: 2021-07-27 14:00:29,346:      pdf_renderer.py:  470: printSegment: proceeds with downloading all the reference sequences (the sidecar metadata file, and video sequence).
   DEBUG: 2021-07-27 14:00:29,347:      pdf_renderer.py:  470: printSegment: Downloading all variants of a given scenario/codec
   DEBUG: 2021-07-27 14:00:29,347:      pdf_renderer.py:  470: printSegment: download.py --dl-streams --scenario_dir
   DEBUG: 2021-07-27 14:00:29,348:      pdf_renderer.py:  470: printSegment: /data/Bitstreams/Scenario-3-Screen/265
   DEBUG: 2021-07-27 14:00:29,348:      pdf_renderer.py:  470: printSegment: this download the 
   DEBUG: 2021-07-27 14:00:29,349:      pdf_renderer.py:  470: printSegment: reference-sequence.csv
   DEBUG: 2021-07-27 14:00:29,350:      pdf_renderer.py:  470: printSegment:  for the target scenario 
   DEBUG: 2021-07-27 14:00:29,350:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,350:      pdf_renderer.py:  470: printSegment: Scenario-3-Screen
   DEBUG: 2021-07-27 14:00:29,351:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,351:      pdf_renderer.py:  470: printSegment: ,
   DEBUG: 2021-07-27 14:00:29,352:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2021-07-27 14:00:29,352:      pdf_renderer.py:  470: printSegment: reads that csv, and
   DEBUG: 2021-07-27 14:00:29,352:      pdf_renderer.py:  470: printSegment: proceeds with downloading all the reference sequences (the sidecar metadata file, and video sequence).
   DEBUG: 2021-07-27 14:00:29,353:      pdf_renderer.py:  470: printSegment: dry-run
   DEBUG: 2021-07-27 14:00:29,354:      pdf_renderer.py:  470: printSegment: download.py --dry-run --dl-streams --scenario_dir
   DEBUG: 2021-07-27 14:00:29,355:      pdf_renderer.py:  470: printSegment: /data/Bitstreams/Scenario-3-Screen/265
   DEBUG: 2021-07-27 14:00:29,355:      pdf_renderer.py:  470: printSegment: dry-run doesn
   DEBUG: 2021-07-27 14:00:29,355:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,356:      pdf_renderer.py:  470: printSegment: t proceed with download, but instead it lists files that need to be downloaded.
   DEBUG: 2021-07-27 14:00:29,357:      pdf_renderer.py:  470: printSegment: Pre-processing content
   DEBUG: 2021-07-27 14:00:29,358:      pdf_renderer.py:  470: printSegment: For some scenario/metric configurations it is required to pre-process content (eg. convert ref sequence to 10bit).
   DEBUG: 2021-07-27 14:00:29,358:      pdf_renderer.py:  470: printSegment: The conversion is done using the HDRTools
   DEBUG: 2021-07-27 14:00:29,359:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,359:      pdf_renderer.py:  470: printSegment:  ChromaConvert program.
   DEBUG: 2021-07-27 14:00:29,360:      pdf_renderer.py:  470: printSegment: This can bee done with the dedicated conversion script expected to be run before the metrics computation. If a
   DEBUG: 2021-07-27 14:00:29,360:      pdf_renderer.py:  470: printSegment: conversion already exists (.json + .yuv both exist) it will be used.
   DEBUG: 2021-07-27 14:00:29,361:      pdf_renderer.py:  470: printSegment: For instance the command :
   DEBUG: 2021-07-27 14:00:29,361:      pdf_renderer.py:  470: printSegment: convert.py --scenario_dir /data/Bitstreams/Scenario-3-Screen/265
   DEBUG: 2021-07-27 14:00:29,362:      pdf_renderer.py:  470: printSegment: looks up all anchors of 
   DEBUG: 2021-07-27 14:00:29,362:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,363:      pdf_renderer.py:  470: printSegment: Scenario-3-Screen/265
   DEBUG: 2021-07-27 14:00:29,363:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,363:      pdf_renderer.py:  470: printSegment: , checks if the encoder config internal bit depth is 10bit with an 8 bit
   DEBUG: 2021-07-27 14:00:29,364:      pdf_renderer.py:  470: printSegment: reference sequence, in which case the 8bit reference sequences is converted to 10bit.
   DEBUG: 2021-07-27 14:00:29,365:      pdf_renderer.py:  470: printSegment: Content verification
   DEBUG: 2021-07-27 14:00:29,365:      pdf_renderer.py:  470: printSegment: Bitstream/metrics verification
   DEBUG: 2021-07-27 14:00:29,366:      pdf_renderer.py:  470: printSegment: see the 
   DEBUG: 2021-07-27 14:00:29,366:      pdf_renderer.py:  470: printSegment: samples
   DEBUG: 2021-07-27 14:00:29,366:      pdf_renderer.py:  470: printSegment:  directory for sample verification logs and reports.
   DEBUG: 2021-07-27 14:00:29,367:      pdf_renderer.py:  470: printSegment: verify.py
   DEBUG: 2021-07-27 14:00:29,367:      pdf_renderer.py:  470: printSegment:  script runs verification for bitstream or metrics, updates the anchor
   DEBUG: 2021-07-27 14:00:29,368:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,368:      pdf_renderer.py:  470: printSegment: s metrics if verification is
   DEBUG: 2021-07-27 14:00:29,368:      pdf_renderer.py:  470: printSegment: successfull.
   DEBUG: 2021-07-27 14:00:29,369:      pdf_renderer.py:  470: printSegment: verify all bitstreams in a scenarios:
   DEBUG: 2021-07-27 14:00:29,369:      pdf_renderer.py:  470: printSegment: verify.py bitstream --scenario_dir /data/Bitstreams/Scenario-3/265
   DEBUG: 2021-07-27 14:00:29,370:      pdf_renderer.py:  470: printSegment: verify a specific anchor
   DEBUG: 2021-07-27 14:00:29,371:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,372:      pdf_renderer.py:  470: printSegment: s bitstreams:
   DEBUG: 2021-07-27 14:00:29,372:      pdf_renderer.py:  470: printSegment: verify.py bitstream --scenario_dir /data/Bitstreams/Scenario-3/265
   DEBUG: 2021-07-27 14:00:29,373:      pdf_renderer.py:  470: printSegment: -k S3-A36-265
   DEBUG: 2021-07-27 14:00:29,374:      pdf_renderer.py:  470: printSegment: verify a specific anchor
   DEBUG: 2021-07-27 14:00:29,374:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,374:      pdf_renderer.py:  470: printSegment: s metrics:
   DEBUG: 2021-07-27 14:00:29,375:      pdf_renderer.py:  470: printSegment: verify.py bitstream --scenario_dir /data/Bitstreams/Scenario-3/265
   DEBUG: 2021-07-27 14:00:29,375:      pdf_renderer.py:  470: printSegment: -k S3-A36-265
   DEBUG: 2021-07-27 14:00:29,376:      pdf_renderer.py:  470: printSegment: verify all metrics in a scenarios:
   DEBUG: 2021-07-27 14:00:29,376:      pdf_renderer.py:  470: printSegment: verify.py bitstream --scenario_dir /data/Bitstreams/Scenario-3/265
   DEBUG: 2021-07-27 14:00:29,377:      pdf_renderer.py:  470: printSegment: -k S3-A36-265
   DEBUG: 2021-07-27 14:00:29,377:      pdf_renderer.py:  470: printSegment: bundling verification reports to csv
   DEBUG: 2021-07-27 14:00:29,379:      pdf_renderer.py:  470: printSegment: When running verification steps, the result is stored directly in the anchor json. To export the most recent
   DEBUG: 2021-07-27 14:00:29,379:      pdf_renderer.py:  470: printSegment: verification report to csv, use the following commands :
   DEBUG: 2021-07-27 14:00:29,380:      pdf_renderer.py:  470: printSegment: to process an entire scenario :
   DEBUG: 2021-07-27 14:00:29,380:      pdf_renderer.py:  470: printSegment: verify.py report --scenario_dir /data/Bitstreams/Scenario-3/265 \
   DEBUG: 2021-07-27 14:00:29,381:      pdf_renderer.py:  470: printSegment:     -k S3-A36-265 \
   DEBUG: 2021-07-27 14:00:29,381:      pdf_renderer.py:  470: printSegment:     --template ./report-template.json
   DEBUG: 2021-07-27 14:00:29,382:      pdf_renderer.py:  470: printSegment: generates 
   DEBUG: 2021-07-27 14:00:29,382:      pdf_renderer.py:  470: printSegment: /data/Bitstreams/Scenario-3/265/verification_report.csv
   DEBUG: 2021-07-27 14:00:29,382:      pdf_renderer.py:  470: printSegment: .
   DEBUG: 2021-07-27 14:00:29,383:      pdf_renderer.py:  470: printSegment: the 
   DEBUG: 2021-07-27 14:00:29,383:      pdf_renderer.py:  470: printSegment: -k
   DEBUG: 2021-07-27 14:00:29,384:      pdf_renderer.py:  470: printSegment:  anchor key is optional and restricts processing to a specific anchor instead of the entire scenario.
   DEBUG: 2021-07-27 14:00:29,384:      pdf_renderer.py:  470: printSegment: the 
   DEBUG: 2021-07-27 14:00:29,385:      pdf_renderer.py:  470: printSegment: --template
   DEBUG: 2021-07-27 14:00:29,385:      pdf_renderer.py:  470: printSegment:  argument is optional and specifies a json template for the report (contact info, etc ...). By default,
   DEBUG: 2021-07-27 14:00:29,386:      pdf_renderer.py:  470: printSegment: contact information and document fields are copied from the anchor
   DEBUG: 2021-07-27 14:00:29,386:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2021-07-27 14:00:29,387:      pdf_renderer.py:  470: printSegment: s json.
   DEBUG: 2021-07-27 14:00:29,387:      pdf_renderer.py:  470: printSegment: sample 
   DEBUG: 2021-07-27 14:00:29,387:      pdf_renderer.py:  470: printSegment: ./report-template.json
   DEBUG: 2021-07-27 14:00:29,388:      pdf_renderer.py:  470: printSegment:  :
   DEBUG: 2021-07-27 14:00:29,388:      pdf_renderer.py:  470: printSegment: {
   DEBUG: 2021-07-27 14:00:29,389:      pdf_renderer.py:  470: printSegment:     "Contact": {
   DEBUG: 2021-07-27 14:00:29,389:      pdf_renderer.py:  470: printSegment:         "Company": "Co",
   DEBUG: 2021-07-27 14:00:29,389:      pdf_renderer.py:  470: printSegment:         "name": "Name",
   DEBUG: 2021-07-27 14:00:29,390:      pdf_renderer.py:  470: printSegment:         "e-mail": "e@mail.me"
   DEBUG: 2021-07-27 14:00:29,390:      pdf_renderer.py:  470: printSegment:     },
   DEBUG: 2021-07-27 14:00:29,390:      pdf_renderer.py:  470: printSegment:     "meeting": "",
   DEBUG: 2021-07-27 14:00:29,391:      pdf_renderer.py:  470: printSegment:     "input": ""
   DEBUG: 2021-07-27 14:00:29,391:      pdf_renderer.py:  470: printSegment: }
   DEBUG: 2021-07-27 14:00:29,392:      pdf_renderer.py:  470: printSegment: Creating new test data
   DEBUG: 2021-07-27 14:00:29,392:      pdf_renderer.py:  470: printSegment: the scripts can be used to generate new data for a given 
   DEBUG: 2021-07-27 14:00:29,393:      pdf_renderer.py:  470: printSegment: scenario
   DEBUG: 2021-07-27 14:00:29,394:      pdf_renderer.py:  470: printSegment:  / 
   DEBUG: 2021-07-27 14:00:29,394:      pdf_renderer.py:  470: printSegment: encoder
   DEBUG: 2021-07-27 14:00:29,395:      pdf_renderer.py:  470: printSegment:  :
   DEBUG: 2021-07-27 14:00:29,395:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2021-07-27 14:00:29,396:      pdf_renderer.py:  470: printSegment: encoder
   DEBUG: 2021-07-27 14:00:29,396:      pdf_renderer.py:  470: printSegment: : encodes streams based on 
   DEBUG: 2021-07-27 14:00:29,398:      pdf_renderer.py:  470: printSegment: Bitstreams/scenario/codec/streams.csv
   DEBUG: 2021-07-27 14:00:29,401:      pdf_renderer.py:  470: printSegment:  and 
   DEBUG: 2021-07-27 14:00:29,401:      pdf_renderer.py:  470: printSegment: Bitstreams/scenario/reference-sequences.csv
   DEBUG: 2021-07-27 14:00:29,402:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2021-07-27 14:00:29,402:      pdf_renderer.py:  470: printSegment: metrics
   DEBUG: 2021-07-27 14:00:29,403:      pdf_renderer.py:  470: printSegment: : compute metrics and updates streams metadata
   DEBUG: 2021-07-27 14:00:29,403:      pdf_renderer.py:  470: printSegment: anchor generation
   DEBUG: 2021-07-27 14:00:29,404:      pdf_renderer.py:  470: printSegment: encode a specific anchor, eg. S3-A36-265 in Scenario-3:
   DEBUG: 2021-07-27 14:00:29,405:      pdf_renderer.py:  470: printSegment: create.py --scenario_dir /data/Bitstreams/Scenario-3/265 -k
   DEBUG: 2021-07-27 14:00:29,406:      pdf_renderer.py:  470: printSegment: S3-A36-265 encoder
   DEBUG: 2021-07-27 14:00:29,406:      pdf_renderer.py:  470: printSegment: encode all anchors in Scenario-3:
   DEBUG: 2021-07-27 14:00:29,407:      pdf_renderer.py:  470: printSegment: create.py --scenario_dir /data/Bitstreams/Scenario-3/265 encoder
   DEBUG: 2021-07-27 14:00:29,407:      pdf_renderer.py:  470: printSegment: metrics generation
   DEBUG: 2021-07-27 14:00:29,408:      pdf_renderer.py:  470: printSegment: decode and compute metrics for a specific anchor, eg. S3-A36-265 in Scenario-3:
   DEBUG: 2021-07-27 14:00:29,409:      pdf_renderer.py:  470: printSegment: create.py --scenario_dir /data/Bitstreams/Scenario-3/265 -k
   DEBUG: 2021-07-27 14:00:29,409:      pdf_renderer.py:  470: printSegment: S3-A36-265 decoder`
   DEBUG: 2021-07-27 14:00:29,410:      pdf_renderer.py:  470: printSegment: decode and compute metrics for all anchors in Scenario-3:
   DEBUG: 2021-07-27 14:00:29,410:      pdf_renderer.py:  470: printSegment: create.py --scenario_dir /data/Bitstreams/Scenario-3/265 decoder`
   DEBUG: 2021-07-27 14:00:29,411:      pdf_renderer.py:  470: printSegment: Notes
   DEBUG: 2021-07-27 14:00:29,412:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2021-07-27 14:00:29,413:      pdf_renderer.py:  470: printSegment: reference sequences are described through a sidecar file following the json schema specified at :
   DEBUG: 2021-07-27 14:00:29,413:      pdf_renderer.py:  470: printSegment: https://github.com/haudiobe/5G-Video-Content/blob/main/3gpp-raw-schema.json
   DEBUG: 2021-07-27 14:00:29,414:      pdf_renderer.py:  470: printSegment: comparing codecs
   DEBUG: 2021-07-27 14:00:29,414:      pdf_renderer.py:  470: printSegment: (Work in progress)
   DEBUG: 2021-07-27 14:00:29,415:      pdf_renderer.py:  470: printSegment: environment variables
   DEBUG: 2021-07-27 14:00:29,416:      pdf_renderer.py:  470: printSegment: Some environment variables are configured in the docker file.
   DEBUG: 2021-07-27 14:00:29,416:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2021-07-27 14:00:29,416:      pdf_renderer.py:  470: printSegment: In order to run the scirpts on a custom environment,
   DEBUG: 2021-07-27 14:00:29,417:      pdf_renderer.py:  470: printSegment: the following environment variables are used to locate the executables.
   DEBUG: 2021-07-27 14:00:29,417:      pdf_renderer.py:  470: printSegment: reference encoder/decoders:
   DEBUG: 2021-07-27 14:00:29,418:      pdf_renderer.py:  470: printSegment: JM
   DEBUG: 2021-07-27 14:00:29,418:      pdf_renderer.py:  470: printSegment: JM_ENCODER=/path/to/JM/bin/lencod_static
   DEBUG: 2021-07-27 14:00:29,419:      pdf_renderer.py:  470: printSegment: JM_DECODER=/path/to/JM/bin/ldecod_static
   DEBUG: 2021-07-27 14:00:29,419:      pdf_renderer.py:  470: printSegment: HM
   DEBUG: 2021-07-27 14:00:29,420:      pdf_renderer.py:  470: printSegment: HM_ENCODER=/path/to/HM/bin/TAppEncoderStatic
   DEBUG: 2021-07-27 14:00:29,420:      pdf_renderer.py:  470: printSegment: HM_DECODER=/path/to/bin/TAppDecoderStatic
   DEBUG: 2021-07-27 14:00:29,421:      pdf_renderer.py:  470: printSegment: SCM
   DEBUG: 2021-07-27 14:00:29,421:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2021-07-27 14:00:29,422:      pdf_renderer.py:  470: printSegment: ENV SCM
   DEBUG: 2021-07-27 14:00:29,422:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2021-07-27 14:00:29,423:      pdf_renderer.py:  470: printSegment: ENCODER=/path/to/SCM/bin/TAppEncoderStatic
   DEBUG: 2021-07-27 14:00:29,423:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2021-07-27 14:00:29,423:      pdf_renderer.py:  470: printSegment: ENV SCM
   DEBUG: 2021-07-27 14:00:29,424:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2021-07-27 14:00:29,424:      pdf_renderer.py:  470: printSegment: DECODER=/path/to/SCM/bin/TAppDecoderStatic
   DEBUG: 2021-07-27 14:00:29,424:      pdf_renderer.py:  470: printSegment: VTM
   DEBUG: 2021-07-27 14:00:29,425:      pdf_renderer.py:  470: printSegment: VTM_ENCODER=/path/to/bin/EncoderAppStatic
   DEBUG: 2021-07-27 14:00:29,426:      pdf_renderer.py:  470: printSegment: VTM_DECODER=/path/to/bin/DecoderAppStatic
   DEBUG: 2021-07-27 14:00:29,426:      pdf_renderer.py:  470: printSegment: Adding a custom encoder
   DEBUG: 2021-07-27 14:00:29,427:      pdf_renderer.py:  470: printSegment: implement the EncoderBase interface (encoder
   DEBUG: 2021-07-27 14:00:29,428:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2021-07-27 14:00:29,429:      pdf_renderer.py:  470: printSegment: id, encode
   DEBUG: 2021-07-27 14:00:29,429:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2021-07-27 14:00:29,429:      pdf_renderer.py:  470: printSegment: variant, decode
   DEBUG: 2021-07-27 14:00:29,430:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2021-07-27 14:00:29,430:      pdf_renderer.py:  470: printSegment: variant) and decorate your class
   DEBUG: 2021-07-27 14:00:29,431:      pdf_renderer.py:  470: printSegment: (@register
   DEBUG: 2021-07-27 14:00:29,431:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2021-07-27 14:00:29,432:      pdf_renderer.py:  470: printSegment: encoder)
   DEBUG: 2021-07-27 14:00:29,432:      pdf_renderer.py:  470: printSegment: metrics computation:
   DEBUG: 2021-07-27 14:00:29,433:      pdf_renderer.py:  470: printSegment: HDRTools
   DEBUG: 2021-07-27 14:00:29,433:      pdf_renderer.py:  470: printSegment: HDRMETRICS_TOOL=/path/to/HDRTools/build/bin/HDRMetrics
   DEBUG: 2021-07-27 14:00:29,434:      pdf_renderer.py:  470: printSegment: VMAF
   DEBUG: 2021-07-27 14:00:29,435:      pdf_renderer.py:  470: printSegment: VMAF_EXE=/path/to/vmaf/libvmaf/build/tools/vmaf
   DEBUG: 2021-07-27 14:00:29,435:      pdf_renderer.py:  470: printSegment: VMAF_MODEL=path=/path/to/vmaf/model/vmaf_v0.6.1.json:enable_transform
   DEBUG: 2021-07-27 14:00:29,436:      pdf_renderer.py:   53: 0, [1, 'Overview', 1, 68.0]
   DEBUG: 2021-07-27 14:00:29,436:      pdf_renderer.py:   53: 1, [1, 'Docker image', 1, 256.4]
   DEBUG: 2021-07-27 14:00:29,436:      pdf_renderer.py:   53: 2, [2, 'Building the docker image', 1, 354.4]
   DEBUG: 2021-07-27 14:00:29,436:      pdf_renderer.py:   53: 3, [2, 'Using the docker image', 1, 436.0]
   DEBUG: 2021-07-27 14:00:29,436:      pdf_renderer.py:   53: 4, [1, 'Downloading reference content', 1, 608.0]
   DEBUG: 2021-07-27 14:00:29,436:      pdf_renderer.py:   53: 5, [1, 'Pre-processing content', 2, 363.2]
   DEBUG: 2021-07-27 14:00:29,436:      pdf_renderer.py:   53: 6, [1, 'Content verification', 2, 551.6]
   DEBUG: 2021-07-27 14:00:29,436:      pdf_renderer.py:   53: 7, [2, 'Bitstream/metrics verification', 2, 589.6]
   DEBUG: 2021-07-27 14:00:29,437:      pdf_renderer.py:   53: 8, [2, 'bundling verification reports to csv', 3, 242.8]
   DEBUG: 2021-07-27 14:00:29,437:      pdf_renderer.py:   53: 9, [1, 'Creating new test data', 3, 588.8000000000001]
   DEBUG: 2021-07-27 14:00:29,437:      pdf_renderer.py:   53: 10, [2, 'anchor generation', 3, 692.8000000000001]
   DEBUG: 2021-07-27 14:00:29,437:      pdf_renderer.py:   53: 11, [2, 'metrics generation', 4, 182.8]
   DEBUG: 2021-07-27 14:00:29,437:      pdf_renderer.py:   53: 12, [1, 'comparing codecs', 4, 378.8]
   DEBUG: 2021-07-27 14:00:29,437:      pdf_renderer.py:   53: 13, [1, 'environment variables', 4, 447.2]
   DEBUG: 2021-07-27 14:00:29,437:      pdf_renderer.py:   53: 14, [2, 'reference encoder/decoders:', 4, 515.1999999999999]
   DEBUG: 2021-07-27 14:00:29,437:      pdf_renderer.py:   53: 15, [3, 'Adding a custom encoder', 5, 92.4]
   DEBUG: 2021-07-27 14:00:29,437:      pdf_renderer.py:   53: 16, [3, 'metrics computation:', 5, 151.20000000000002]
